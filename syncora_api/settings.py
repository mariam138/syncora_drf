"""
Django settings for syncora_api project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url

if os.path.exists("env.py"):
    import env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# Debug is true in development but false in production
DEBUG = 'DEV' in os.environ

ALLOWED_HOSTS = [
    "8000-mariam138-syncoradrf-2w8pz189o83.ws.codeinstitute-ide.net",
    "localhost",
    "syncora-api-ecc74194384c.herokuapp.com",
]

CSRF_TRUSTED_ORIGINS = [
    "https://*.codeinstitute-ide.net/",
    "https://*.herokuapp.com"
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # cloudinary storage underneath static files as we are only using it for media
    "cloudinary_storage",
    "cloudinary",
    # DRF framework to create API
    "rest_framework",
    "rest_framework.authtoken",
    "dj_rest_auth",
    # Apps for registration
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "dj_rest_auth.registration",
    "corsheaders",
    # django location field
    "location_field.apps.DefaultConfig",
    # Custom apps
    "profiles",
    "tasks",
]

# For use with django all-auth for registration functionality
SITE_ID = 1

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

# Setting cors headers origins
if "CLIENT_ORIGIN" in os.environ:
    CORS_ALLOWED_ORIGINS = [os.environ.get("CLIENT_ORIGIN")]
else:
    CORS_ALLOWED_ORIGIN_REGEXES = [
        r"^https://.*\.codeinstitute-ide\.net$",
        # For local host when using with vscode
        r"^http://localhost(:\d+)?$", 
        r"^https://localhost(:\d+)?$",
    ]

# Allow use of cookies in cross-site HTTP requests
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = "syncora_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "syncora_api.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
# if "DEV" in os.environ:
#     DATABASES = {
#         "default": {
#             "ENGINE": "django.db.backends.sqlite3",
#             "NAME": BASE_DIR / "db.sqlite3",
#         }
#     }
# else:
DATABASES = {"default": dj_database_url.parse(os.environ.get("DATABASE_URL"))}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Cloudinary
CLOUDINARY_STORAGE = {"CLOUDINARY_URL": os.environ.get("CLOUDINARY_URL")}
# CLOUDINARY_URL = os.environ.get('CLOUDINARY_URL')
MEDIA_URL = "/media/"
# Allows for image storage in cloudinary
DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"

# REST framework settings
REST_FRAMEWORK = {
    # "DEFAULT_RENDERER_CLASSES": [
    #         "rest_framework.renderers.BrowsableAPIRenderer"
    #         # if "DEV" in os.environ
    #         # else "rest_framework.renderers.JSONRenderer"
    # ],
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ),
    # Use sessions auth during development but use JWT in production
    "DEFAULT_AUTHENTICATION_CLASSES": [
        (
            "rest_framework.authentication.SessionAuthentication"
            if "DEV" in os.environ
            else "dj_rest_auth.jwt_auth.JWTCookieAuthentication"
        )
    ],
}

# REST auth settings
REST_AUTH = {
    "USE_JWT": True,
    'JWT_AUTH_COOKIE': 'syncora-auth',
    'JWT_AUTH_REFRESH_COOKIE': 'syncora-refresh-token',
    # Cookies will only be sent through https
    'JWT_AUTH_SECURE': True,
    'JWT_AUTH_SAMESITE': 'None'
}

# Use custom registration serialiser
REST_AUTH_REGISTER_SERIALIZERS = {
    "REGISTER_SERIALIZER": "syncora_api.serializers.CustomRegisterSerializer"
}
